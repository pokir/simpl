floor {
  `std`
  is_num! F . == ? {
    @_
    "can't run floor because the argument is not a number" .
    panic!
  } @_

  1 . duplicate!
  1 . %
  -
}


ceil {
  `std`
  is_num! F . == ? {
    @_
    "can't run ceil because the argument is not a number" .
    panic!
  } @_

  floor!
  1 . +
}


round {
  `std`
  is_num! F . == ? {
    @_
    "can't run round because the argument is not a number" .
    panic!
  } @_

  0.5 . +
  floor!
}


pow {
  `std`
  # TODO: allow fractional exponents
  @ exponent
  @ base

  exponent . is_num! F . == ? {
    @_
    "can't run pow because the exponent is not a number" .
    panic!
  } @_
  @_ # remove the exponent

  base . is_num! F . == ? {
    @_
    "can't run pow because the base is not a number" .
    panic!
  } @_
  @_ # remove the base

  exponent . @ counter

  1 .

  exponent . 0 . >= ? {
    @_
    & {
      counter . 0 . <= ? {
        @_
        ^
      }
      @_

      counter . 1 . - @ counter

      base . *
    }
    ->
  }
  @_
  
  exponent . 0 . < ? {
    @_

    counter . -1 . * @ counter

    & {
      counter . 0 . <= ? {
        @_
        ^
      }
      @_

      counter . 1 . - @ counter

      base . /
    }
    ->
  }
  @_
}
